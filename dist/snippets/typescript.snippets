# TypeScript

snippet ctor
	/**
	 *
	*/
	constructor() {
		super();
		$0
	}
snippet class
	class ${1:name} {
		constructor(${2:parameters}) {
			$0
		}
	}
snippet public method
	/**
	* ${1:name}
	*/
	public ${1:name}() {
		$0
	}
snippet private method
	private ${1:name}() {
		$0
	}
snippet import
	import { $0 } from ${1:module};
snippet get
	public get ${1:value}() : ${2:string} {
		${3:return $0}
	}
snippet log
	console.log($1);
snippet warn
	console.warn($1);
snippet error
	console.error($1);
snippet prop
	
	private _${1:value} : ${2:string};
	public get ${1:value}() : ${2:string} {
		return this._${1:value};
	}
	public set ${1:value}(v : ${2:string}) {
		this._${1:value} = v;
	}
	

snippet ref
	/// <reference path=\"$1\" />
	$0

snippet set
	public set ${1:value}(v : ${2:string}) {
		this.$3 = v;
	}
snippet throw
	throw new Error(\"$1\");
	$0

snippet for
	for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {
		const ${3:element} = ${2:array}[${1:index}];
		$0
	}
snippet foreach
	${1:array}.forEach(${2:element} => {
		$0
	});
snippet forin
	for (const ${1:key} in ${2:object}) {
		if (Object.prototype.hasOwnProperty.call(${2:object}, ${1:key})) {
			const ${3:element} = ${2:object}[${1:key}];
			$0
		}
	}
snippet forof
	for (const ${1:iterator} of ${2:object}) {
		$0
	}
snippet forawaitof
	for await (const ${1:iterator} of ${2:object}) {
		$0
	}
snippet function
	function ${1:name}(${2:params}:${3:type}) {
		$0
	}
snippet if
	if (${1:condition}) {
		$0
	}
snippet ifelse
	if (${1:condition}) {
		$0
	} else {
		
	}
snippet new
	const ${1:name} = new ${2:type}(${3:arguments});$0
snippet switch
	switch (${1:key}) {
		case ${2:value}:
			$0
			break;
		default:
			break;
	}
snippet while
	while (${1:condition}) {
		$0
	}
snippet dowhile
	do {
		$0
	} while (${1:condition});
snippet trycatch
	try {
		$0
	} catch (${1:error}) {
		
	}
snippet settimeout
	setTimeout(() => {
		$0
	}, ${1:timeout});
snippet #region
	//#region $0
snippet #endregion
	//#endregion
snippet newpromise
	new Promise<${1:void}>((resolve, reject) => {
		$0
	})
snippet async function
	async function ${1:name}(${2:params}:${3:type}) {
		$0
	}
snippet async arrow function
	async (${1:params}:${2:type}) => {
		$0
	}
